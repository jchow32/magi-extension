This package has two different makefiles (makefile_Pathway and makefile_Cluster). Both need to be used to build it. 
make -f makefile_Pathway
make -f makefile_Cluster

The two executable files are:
./Pathway_Select
./Cluster

The first executable (./Pathway_Select) creates the seeds of size 5 to 8 genes (the names of the output files are in format of BestPaths.Length*.Control*.Run*).
The second executable (./Cluster) merges the seeds into clusters/modules.

*Pathway_Select*

PPI Networks, List of de novo mutations in cases, list of mutations in controls, length of genes (genes for which length is not provided are given a default length of 3300bp), hash table of the gene names to exact coexpression values, pair-wise gene coexpressions, and a list if gene to filter/remove (optional)

	Required Parameters 
	-p <PPI Network>
		The input file should be a file of binary interactions. File input format:<Gene_Name_1><\t><Gene_Name_2> (Example: StringNew_HPRD) 
	-c <cases mutation list>
		The cases de novo mutations list. File input format:<Gene_Name_1><\t>0<\t>0<\t><mutation effect> (Example: ID_2_Autism_4_Severe_Missense.Clean_WithNew) 
	-h <Gene CoExpression Id>
		The input gives the order of each gene appearing in the coExpression matrix. File input format: <Gene_row_id><\t>OTHER_ID<\t><Gene_Name> (Example: GeneCoExpresion_ID)
	-e <CoExpression Matrix>
		Pairwise gene coexpression values. File input format:<Gene_Name_1><\t><Gene_Name_2><\t><CoExpression - r^6> (example: adj1.csv.Tab.BinaryFormat)
		Note that the genes pairs are sorted based on their <Gene_row_id> provided in the file inputed as -h parameters. 
	-d <control mutation list>
		The number of mutations in each gene in controls. File input format:<Gene_Name_1><\t><number of mutations in control> (example: New_ESP_Sereve)
	-f <filter genes list>
		This is an optional field. If you want to remove a set of genes from PPI/CoExpression networks. File input format: <Gene Name>
	-l <Length of genes>
		This file includes the length of each gene. File input format:<Gene Name><\t><Length> (example : Gene_Name_Length)
	-i <run id>
		The id for this run. Indicates the postfix of the files produced for different runs. 
	
Output:
1) RandomGeneList.%i: The list of genes with their assigned score (based on mutations in cases) and total number of mutation in controls 
2) BestPaths.Length%i.Control%i.Run%i: The seeds created (a total of 1000 seeds per type), for different lengths (default is from 5 to 8) and total mutations in control (ranging from 0 to 4)


*Cluster*
	Required Parameters

	-p <PPI Network>
		The input file should be a file of binary interactions. File input format:<Gene_Name_1><\t><Gene_Name_2> (Example: StringNew_HPRD)
	-c <case/control mutation scores>
		The input file is the RandomGeneList.%i file created in previous step
	-h <Gene CoExpression Id>
 		The input gives the order of each gene appearing in the coExpression table. File input format: <Gene_row_id><\t>OTHER_ID<\t><Gene_Name> (Example: GeneCoExpresion_ID)
	-e <CoExpression Matrix>
		Pairwise gene coexpression values. File input format:<Gene_Name_1><\t><Gene_Name_2><\t><CoExpression - r^6> (example: adj1.csv.Tab.BinaryFormat)
		Note that the genes pairs are sorted based on their <Gene_row_id> provided in the file inputed as -h parameters.
	-s <Seed File>
		The file names of different seeds. <Seed Name File><\t><Number of seeds><\t><Length of Seeds> (example: Paths. The file needs to include the path to all the BestPaths.Length%i.Control%i.Run%i produced in the previous step)
	-m <upper bound on control mutations>
		The total number of mutations in control's allowed. 
	-l <lower bound on the size of the module>
		The minimum number of genes in the module 
	-u <upper bound on the size of the module>
		The maximum number of genes in the module
	-a <minimum ratio of seed score allowed>
		For each seed type the top percentage of the score from maximum score of the seed allowed (in the paper 0.5 was used)
	-i <run id>  
		The id for this run.

	Optional Parameters
	
	-minCoExpr <minimum pair-wise coexpression value>
		The minimum pair-wise coexpression value per gene allowed (the default is 0.01, i.e. r^2>0.01, which is the median coexpression value in the input adj1.csv.Tab.BinaryFormat)
	-avgCoExpr <minimum average coexpression of the module>
		The minimum average coexpression of the modules allowed (the default is 0.415)
	-avgDensity <minimum density of PPI>
		The minimum avergae PPI density of the modules allowed (the default is 0.08)
Note : The default values for -avgcoExpr and -avgDenity are for minimum number of 35 genes (-l 35)
Note : The generated clusters will be written to stdout.
